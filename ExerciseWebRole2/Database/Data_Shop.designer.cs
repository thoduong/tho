#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExerciseWebRole2.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="E-Comerce")]
	public partial class Data_ShopDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertUserInformation(UserInformation instance);
    partial void UpdateUserInformation(UserInformation instance);
    partial void DeleteUserInformation(UserInformation instance);
    partial void InsertAccountPaymentInfo(AccountPaymentInfo instance);
    partial void UpdateAccountPaymentInfo(AccountPaymentInfo instance);
    partial void DeleteAccountPaymentInfo(AccountPaymentInfo instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertImage_product(Image_product instance);
    partial void UpdateImage_product(Image_product instance);
    partial void DeleteImage_product(Image_product instance);
    partial void InsertMappingCartProduct(MappingCartProduct instance);
    partial void UpdateMappingCartProduct(MappingCartProduct instance);
    partial void DeleteMappingCartProduct(MappingCartProduct instance);
    partial void InsertMappingReceiptProduct(MappingReceiptProduct instance);
    partial void UpdateMappingReceiptProduct(MappingReceiptProduct instance);
    partial void DeleteMappingReceiptProduct(MappingReceiptProduct instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertReceipt(Receipt instance);
    partial void UpdateReceipt(Receipt instance);
    partial void DeleteReceipt(Receipt instance);
    partial void InsertShoppingCart(ShoppingCart instance);
    partial void UpdateShoppingCart(ShoppingCart instance);
    partial void DeleteShoppingCart(ShoppingCart instance);
    #endregion
		
		public Data_ShopDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["E_ComerceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Data_ShopDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data_ShopDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data_ShopDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data_ShopDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<UserInformation> UserInformations
		{
			get
			{
				return this.GetTable<UserInformation>();
			}
		}
		
		public System.Data.Linq.Table<AccountPaymentInfo> AccountPaymentInfos
		{
			get
			{
				return this.GetTable<AccountPaymentInfo>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Image_product> Image_products
		{
			get
			{
				return this.GetTable<Image_product>();
			}
		}
		
		public System.Data.Linq.Table<MappingCartProduct> MappingCartProducts
		{
			get
			{
				return this.GetTable<MappingCartProduct>();
			}
		}
		
		public System.Data.Linq.Table<MappingReceiptProduct> MappingReceiptProducts
		{
			get
			{
				return this.GetTable<MappingReceiptProduct>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Receipt> Receipts
		{
			get
			{
				return this.GetTable<Receipt>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this.GetTable<ShoppingCart>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Role;
		
		private string _CartID;
		
		private bool _isActive;
		
		private EntityRef<UserInformation> _UserInformation;
		
		private EntityRef<ShoppingCart> _ShoppingCart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnCartIDChanging(string value);
    partial void OnCartIDChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Account()
		{
			this._UserInformation = default(EntityRef<UserInformation>);
			this._ShoppingCart = default(EntityRef<ShoppingCart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					if (this._ShoppingCart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserInformation", Storage="_UserInformation", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public UserInformation UserInformation
		{
			get
			{
				return this._UserInformation.Entity;
			}
			set
			{
				UserInformation previousValue = this._UserInformation.Entity;
				if (((previousValue != value) 
							|| (this._UserInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInformation.Entity = null;
						previousValue.Account = null;
					}
					this._UserInformation.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("UserInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_Account", Storage="_ShoppingCart", ThisKey="CartID", OtherKey="CartID", IsForeignKey=true)]
		public ShoppingCart ShoppingCart
		{
			get
			{
				return this._ShoppingCart.Entity;
			}
			set
			{
				ShoppingCart previousValue = this._ShoppingCart.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingCart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingCart.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._ShoppingCart.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CartID = value.CartID;
					}
					else
					{
						this._CartID = default(string);
					}
					this.SendPropertyChanged("ShoppingCart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInformation")]
	public partial class UserInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _Fullname;
		
		private string _Email;
		
		private System.DateTime _Birthday;
		
		private string _HomeAddress;
		
		private string _WorkAddress;
		
		private string _HomePhone;
		
		private string _WorkPhone;
		
		private string _MobilePhone;
		
		private EntitySet<Receipt> _Receipts;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<AccountPaymentInfo> _AccountPaymentInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnHomeAddressChanging(string value);
    partial void OnHomeAddressChanged();
    partial void OnWorkAddressChanging(string value);
    partial void OnWorkAddressChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnWorkPhoneChanging(string value);
    partial void OnWorkPhoneChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    #endregion
		
		public UserInformation()
		{
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._Account = default(EntityRef<Account>);
			this._AccountPaymentInfo = default(EntityRef<AccountPaymentInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if ((this._Account.HasLoadedOrAssignedValue || this._AccountPaymentInfo.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="DateTime NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddress", DbType="NVarChar(100)")]
		public string HomeAddress
		{
			get
			{
				return this._HomeAddress;
			}
			set
			{
				if ((this._HomeAddress != value))
				{
					this.OnHomeAddressChanging(value);
					this.SendPropertyChanging();
					this._HomeAddress = value;
					this.SendPropertyChanged("HomeAddress");
					this.OnHomeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkAddress", DbType="NVarChar(100)")]
		public string WorkAddress
		{
			get
			{
				return this._WorkAddress;
			}
			set
			{
				if ((this._WorkAddress != value))
				{
					this.OnWorkAddressChanging(value);
					this.SendPropertyChanging();
					this._WorkAddress = value;
					this.SendPropertyChanged("WorkAddress");
					this.OnWorkAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="NVarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhone", DbType="NVarChar(50)")]
		public string WorkPhone
		{
			get
			{
				return this._WorkPhone;
			}
			set
			{
				if ((this._WorkPhone != value))
				{
					this.OnWorkPhoneChanging(value);
					this.SendPropertyChanging();
					this._WorkPhone = value;
					this.SendPropertyChanged("WorkPhone");
					this.OnWorkPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NVarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInformation_Receipt", Storage="_Receipts", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_UserInformation", Storage="_Account", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.UserInformation = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.UserInformation = this;
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountPaymentInfo_UserInformation", Storage="_AccountPaymentInfo", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public AccountPaymentInfo AccountPaymentInfo
		{
			get
			{
				return this._AccountPaymentInfo.Entity;
			}
			set
			{
				AccountPaymentInfo previousValue = this._AccountPaymentInfo.Entity;
				if (((previousValue != value) 
							|| (this._AccountPaymentInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountPaymentInfo.Entity = null;
						previousValue.UserInformation = null;
					}
					this._AccountPaymentInfo.Entity = value;
					if ((value != null))
					{
						value.UserInformation = this;
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("AccountPaymentInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.UserInformation = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.UserInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountPaymentInfo")]
	public partial class AccountPaymentInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _BankName;
		
		private string _CreditCardNumber;
		
		private string _CCV;
		
		private string _NameOnCard;
		
		private System.DateTime _ExpiredDate;
		
		private EntityRef<UserInformation> _UserInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnCreditCardNumberChanging(string value);
    partial void OnCreditCardNumberChanged();
    partial void OnCCVChanging(string value);
    partial void OnCCVChanged();
    partial void OnNameOnCardChanging(string value);
    partial void OnNameOnCardChanged();
    partial void OnExpiredDateChanging(System.DateTime value);
    partial void OnExpiredDateChanged();
    #endregion
		
		public AccountPaymentInfo()
		{
			this._UserInformation = default(EntityRef<UserInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditCardNumber", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CreditCardNumber
		{
			get
			{
				return this._CreditCardNumber;
			}
			set
			{
				if ((this._CreditCardNumber != value))
				{
					this.OnCreditCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CreditCardNumber = value;
					this.SendPropertyChanged("CreditCardNumber");
					this.OnCreditCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCV", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string CCV
		{
			get
			{
				return this._CCV;
			}
			set
			{
				if ((this._CCV != value))
				{
					this.OnCCVChanging(value);
					this.SendPropertyChanging();
					this._CCV = value;
					this.SendPropertyChanged("CCV");
					this.OnCCVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOnCard", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameOnCard
		{
			get
			{
				return this._NameOnCard;
			}
			set
			{
				if ((this._NameOnCard != value))
				{
					this.OnNameOnCardChanging(value);
					this.SendPropertyChanging();
					this._NameOnCard = value;
					this.SendPropertyChanged("NameOnCard");
					this.OnNameOnCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this.OnExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDate = value;
					this.SendPropertyChanged("ExpiredDate");
					this.OnExpiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountPaymentInfo_UserInformation", Storage="_UserInformation", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=false)]
		public UserInformation UserInformation
		{
			get
			{
				return this._UserInformation.Entity;
			}
			set
			{
				UserInformation previousValue = this._UserInformation.Entity;
				if (((previousValue != value) 
							|| (this._UserInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInformation.Entity = null;
						previousValue.AccountPaymentInfo = null;
					}
					this._UserInformation.Entity = value;
					if ((value != null))
					{
						value.AccountPaymentInfo = this;
					}
					this.SendPropertyChanged("UserInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CategoryID;
		
		private string _CategoryName;
		
		private bool _isActive;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    #endregion
		
		public Category()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Products", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image_product")]
	public partial class Image_product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProductID;
		
		private string _Image;
		
		private string _Note;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Image_product()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MappingCartProduct")]
	public partial class MappingCartProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CartID;
		
		private string _ProductID;
		
		private long _Quantity;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<ShoppingCart> _ShoppingCart;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIDChanging(string value);
    partial void OnCartIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(long value);
    partial void OnQuantityChanged();
    #endregion
		
		public MappingCartProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._ShoppingCart = default(EntityRef<ShoppingCart>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					if (this._ShoppingCart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BigInt NOT NULL")]
		public long Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_MappingCartProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.MappingCartProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.MappingCartProducts.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_MappingCartProduct", Storage="_ShoppingCart", ThisKey="CartID", OtherKey="CartID", IsForeignKey=true)]
		public ShoppingCart ShoppingCart
		{
			get
			{
				return this._ShoppingCart.Entity;
			}
			set
			{
				ShoppingCart previousValue = this._ShoppingCart.Entity;
				if (((previousValue != value) 
							|| (this._ShoppingCart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShoppingCart.Entity = null;
						previousValue.MappingCartProducts.Remove(this);
					}
					this._ShoppingCart.Entity = value;
					if ((value != null))
					{
						value.MappingCartProducts.Add(this);
						this._CartID = value.CartID;
					}
					else
					{
						this._CartID = default(string);
					}
					this.SendPropertyChanged("ShoppingCart");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MappingReceiptProduct")]
	public partial class MappingReceiptProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ReceiptID;
		
		private string _ProductID;
		
		private long _Quantity;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Receipt> _Receipt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(string value);
    partial void OnReceiptIDChanged();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnQuantityChanging(long value);
    partial void OnQuantityChanged();
    #endregion
		
		public MappingReceiptProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._Receipt = default(EntityRef<Receipt>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					if (this._Receipt.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="BigInt NOT NULL")]
		public long Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_MappingReceiptProduct", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.MappingReceiptProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.MappingReceiptProducts.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receipt_MappingReceiptProduct", Storage="_Receipt", ThisKey="ReceiptID", OtherKey="ReceiptID", IsForeignKey=true)]
		public Receipt Receipt
		{
			get
			{
				return this._Receipt.Entity;
			}
			set
			{
				Receipt previousValue = this._Receipt.Entity;
				if (((previousValue != value) 
							|| (this._Receipt.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receipt.Entity = null;
						previousValue.MappingReceiptProducts.Remove(this);
					}
					this._Receipt.Entity = value;
					if ((value != null))
					{
						value.MappingReceiptProducts.Add(this);
						this._ReceiptID = value.ReceiptID;
					}
					else
					{
						this._ReceiptID = default(string);
					}
					this.SendPropertyChanged("Receipt");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProductID;
		
		private string _ProductName;
		
		private string _ProductDescription;
		
		private double _ProductPrice;
		
		private long _CurrentQuantity;
		
		private System.DateTime _Date;
		
		private string _CategoryID;
		
		private bool _isActive;
		
		private string _Images;
		
		private EntitySet<MappingCartProduct> _MappingCartProducts;
		
		private EntitySet<MappingReceiptProduct> _MappingReceiptProducts;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(string value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductDescriptionChanging(string value);
    partial void OnProductDescriptionChanged();
    partial void OnProductPriceChanging(double value);
    partial void OnProductPriceChanged();
    partial void OnCurrentQuantityChanging(long value);
    partial void OnCurrentQuantityChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCategoryIDChanging(string value);
    partial void OnCategoryIDChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnImagesChanging(string value);
    partial void OnImagesChanged();
    #endregion
		
		public Product()
		{
			this._MappingCartProducts = new EntitySet<MappingCartProduct>(new Action<MappingCartProduct>(this.attach_MappingCartProducts), new Action<MappingCartProduct>(this.detach_MappingCartProducts));
			this._MappingReceiptProducts = new EntitySet<MappingReceiptProduct>(new Action<MappingReceiptProduct>(this.attach_MappingReceiptProducts), new Action<MappingReceiptProduct>(this.detach_MappingReceiptProducts));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductDescription", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProductDescription
		{
			get
			{
				return this._ProductDescription;
			}
			set
			{
				if ((this._ProductDescription != value))
				{
					this.OnProductDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProductDescription = value;
					this.SendPropertyChanged("ProductDescription");
					this.OnProductDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPrice", DbType="Float NOT NULL")]
		public double ProductPrice
		{
			get
			{
				return this._ProductPrice;
			}
			set
			{
				if ((this._ProductPrice != value))
				{
					this.OnProductPriceChanging(value);
					this.SendPropertyChanging();
					this._ProductPrice = value;
					this.SendPropertyChanged("ProductPrice");
					this.OnProductPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentQuantity", DbType="BigInt NOT NULL")]
		public long CurrentQuantity
		{
			get
			{
				return this._CurrentQuantity;
			}
			set
			{
				if ((this._CurrentQuantity != value))
				{
					this.OnCurrentQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurrentQuantity = value;
					this.SendPropertyChanged("CurrentQuantity");
					this.OnCurrentQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Images", DbType="VarChar(500)")]
		public string Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				if ((this._Images != value))
				{
					this.OnImagesChanging(value);
					this.SendPropertyChanging();
					this._Images = value;
					this.SendPropertyChanged("Images");
					this.OnImagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_MappingCartProduct", Storage="_MappingCartProducts", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<MappingCartProduct> MappingCartProducts
		{
			get
			{
				return this._MappingCartProducts;
			}
			set
			{
				this._MappingCartProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_MappingReceiptProduct", Storage="_MappingReceiptProducts", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<MappingReceiptProduct> MappingReceiptProducts
		{
			get
			{
				return this._MappingReceiptProducts;
			}
			set
			{
				this._MappingReceiptProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Product", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MappingCartProducts(MappingCartProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_MappingCartProducts(MappingCartProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_MappingReceiptProducts(MappingReceiptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_MappingReceiptProducts(MappingReceiptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Receipt")]
	public partial class Receipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ReceiptID;
		
		private string _UserID;
		
		private double _TotalAmount;
		
		private System.DateTime _Date;
		
		private string _Status;
		
		private EntitySet<MappingReceiptProduct> _MappingReceiptProducts;
		
		private EntityRef<UserInformation> _UserInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(string value);
    partial void OnReceiptIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnTotalAmountChanging(double value);
    partial void OnTotalAmountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Receipt()
		{
			this._MappingReceiptProducts = new EntitySet<MappingReceiptProduct>(new Action<MappingReceiptProduct>(this.attach_MappingReceiptProducts), new Action<MappingReceiptProduct>(this.detach_MappingReceiptProducts));
			this._UserInformation = default(EntityRef<UserInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiptID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Float NOT NULL")]
		public double TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receipt_MappingReceiptProduct", Storage="_MappingReceiptProducts", ThisKey="ReceiptID", OtherKey="ReceiptID")]
		public EntitySet<MappingReceiptProduct> MappingReceiptProducts
		{
			get
			{
				return this._MappingReceiptProducts;
			}
			set
			{
				this._MappingReceiptProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInformation_Receipt", Storage="_UserInformation", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserInformation UserInformation
		{
			get
			{
				return this._UserInformation.Entity;
			}
			set
			{
				UserInformation previousValue = this._UserInformation.Entity;
				if (((previousValue != value) 
							|| (this._UserInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInformation.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._UserInformation.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("UserInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MappingReceiptProducts(MappingReceiptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = this;
		}
		
		private void detach_MappingReceiptProducts(MappingReceiptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Receipt = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShoppingCart")]
	public partial class ShoppingCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CartID;
		
		private double _TotalAmount;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<MappingCartProduct> _MappingCartProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCartIDChanging(string value);
    partial void OnCartIDChanged();
    partial void OnTotalAmountChanging(double value);
    partial void OnTotalAmountChanged();
    #endregion
		
		public ShoppingCart()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._MappingCartProducts = new EntitySet<MappingCartProduct>(new Action<MappingCartProduct>(this.attach_MappingCartProducts), new Action<MappingCartProduct>(this.detach_MappingCartProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CartID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CartID
		{
			get
			{
				return this._CartID;
			}
			set
			{
				if ((this._CartID != value))
				{
					this.OnCartIDChanging(value);
					this.SendPropertyChanging();
					this._CartID = value;
					this.SendPropertyChanged("CartID");
					this.OnCartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Float NOT NULL")]
		public double TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_Account", Storage="_Accounts", ThisKey="CartID", OtherKey="CartID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShoppingCart_MappingCartProduct", Storage="_MappingCartProducts", ThisKey="CartID", OtherKey="CartID")]
		public EntitySet<MappingCartProduct> MappingCartProducts
		{
			get
			{
				return this._MappingCartProducts;
			}
			set
			{
				this._MappingCartProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = null;
		}
		
		private void attach_MappingCartProducts(MappingCartProduct entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = this;
		}
		
		private void detach_MappingCartProducts(MappingCartProduct entity)
		{
			this.SendPropertyChanging();
			entity.ShoppingCart = null;
		}
	}
}
#pragma warning restore 1591
